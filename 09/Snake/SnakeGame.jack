/** 

Suggested API


run(){
  while( ~(exit) & ~(victory) & ~(death)){
    let key = getInput()
    if (key = q ){ quit() }
    let direction = parseDirection(key)
    // int gameState
      // 0 = keep playing
      // 1 = victory
      // 2 = death
    let gameState = move(direction)

    let gameOver = move(direction)
  }
}

move(direction){
  coordinates = getCoordinates()
  status = moveStatus(coordinates)
  // I need to draw it crashing into itself, but if it crashes into a wall then the draw function is different.
  // Create a status struct?
  
  if(wallCollision){
    snake.wallCollide(direction)
    return deathCondition
  }else{
    if(snakeCollision){ 
      snake.collideSelf(direction)
      return deathCondition;
    }
    snake.updateHead()
  }

  snake.updateHead(coordinates)
  if(status.invalid) return deathCondition
  if(!status.ate){
    snake.chopTail()
  }
}

getCoordinates(direction){
  returns new x/y coordinates based on current direction
}

moveStatus(x, y){
  checks if snake is occupying the provided coordinates
  checks if coordinates are within bounds of screen
  checks if there is food in the current coordinates

  Maybe use an integer flag for this? 0 = valid, 1 = food, 2 = death ?
    more optimized but also involves magic numbers so idk
  returns 
    isValid boolean 
    hasFood boolean
}

makeFood(){
  generate random x
  generate random y
  check if snake.doesInhabit(x, y)
}

*/

class SnakeGame {
  field Snake snake;
  field int direction;

  constructor SnakeGame new(){
    let snake = Snake.new();
    let direction = 0;
    return this;
  }

  method void dispose(){
    do snake.dispose();
    do Memory.deAlloc(this);
  }

  method void moveSnake(){
    if (direction = 1) { do snake.moveUp(); }
    if (direction = 2) { do snake.moveDown(); }
    if (direction = 3) { do snake.moveLeft(); }
    if (direction = 4) { do snake.moveRight(); }
  }

  method void run(){
    var char key;
    var boolean exit;

    while(~exit){
      while(key = 0){
        let key = Keyboard.keyPressed();
        do moveSnake();
      }
      if (key = 81) { let exit = true; }      // q key
      if (key = 131) { let direction = 1 }    // up arrow
      if (key = 133) { let direction = 2; }   // down arrow
      if (key = 130) { let direction = 3; }   // left arrow
      if (key = 132) { let direction = 4; }   // right arrow

      while(~(key = 0)) {
        let key = Keyboard.keyPressed();
        do moveSnake()
      }
    }
  }
}