// /** 

// SCREEN SIZE => 512 X 256

// Suggested API


// run(){
//   while( ~(exit) & ~(victory) & ~(death)){
//     let key = getInput()
//     if (key = q ){ quit() }
//     let direction = parseDirection(key)
//     // int gameState
//       // 0 = keep playing
//       // 1 = victory
//       // 2 = death
//     let gameState = move(direction)

//     let gameOver = move(direction)
//   }
// }

// move(direction){
//   coordinates = getCoordinates()
//   status = moveStatus(coordinates)
//   // I need to draw it crashing into itself, but if it crashes into a wall then the draw function is different.
//   // Create a status struct?
  
//   if(wallCollision){
//     snake.wallCollide(direction)
//     return deathCondition
//   }else{
//     if(snakeCollision){ 
//       snake.collideSelf(direction)
//       return deathCondition;
//     }
//     snake.updateHead()
//   }

//   snake.updateHead(coordinates)
//   if(status.invalid) return deathCondition
//   if(!status.ate){
//     snake.chopTail()
//   }
// }

// getCoordinates(direction){
//   returns new x/y coordinates based on current direction
// }

// moveStatus(coordinates){
//   checks if snake is occupying the provided coordinates
//   checks if coordinates are within bounds of screen
//   checks if there is food in the current coordinates

//   Maybe use an integer flag for this? 0 = valid, 1 = food, 2 = death ?
//     more optimized but also involves magic numbers so idk
//   returns 
//     isValid boolean 
//     hasFood boolean
// }

// makeFood(){
//   generate random x
//   generate random y
//   check if snake.doesInhabit(x, y)
// }

// */

class SnakeGame {
  field int foodCount;
  field Snake snake;
  field LSFR lsfr;
  field int counter;
  field int pixelSize;
  field int padding;
  field ListNode food;

  constructor SnakeGame new(){
    let foodCount = 0;
    let lsfr = LSFR.new(21257);
    let counter = 0;
    let pixelSize = 16;
    let padding = 1;
    let snake = Snake.new(pixelSize, padding);
    return this;
  }

  function void getKeyboardInput(){
    var char key;
    let key = Keyboard.keyPressed();
    if (key = 81) { do GameState.setQuit(true); }    // q key
    if ((key = 131) & ~(Direction.get() = 2)) { do Direction.set(1); }    // up arrow
    if ((key = 133) & ~(Direction.get() = 1)) { do Direction.set(2); }   // down arrow
    if ((key = 130) & ~(Direction.get() = 4)) { do Direction.set(3); }   // left arrow
    if ((key = 132) & ~(Direction.get() = 3)) { do Direction.set(4); }   // right arrow
    return;
  }

  method void dispose(){
    do snake.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void run(){
    var char key;
    do Direction.set(4);
    do GameState.setVictory(false);
    do GameState.setDeath(false);
    do GameState.setQuit(false);
    do makeFood();
    // initialize snake to be moving right
    // do growSnake();
    while((~GameState.victory()) & (~GameState.death()) & (~GameState.quit())){
      
      do SnakeGame.getKeyboardInput();

      if(Utils.mod(counter, 5000) = 0){
        do move(Direction.get());
      }
      let counter = counter + 1;
    }

    // if (gameState = 1){ do showVictory(); }
    // if(gameState = 2){ do showDeath(); }
    // if(gameState = 3){ do thanksForPlaying(); }
    return;
  }

  // move(direction){
  //   coordinates = getCoordinates()
  //   status = moveStatus(coordinates)
  //   // I need to draw it crashing into itself, but if it crashes into a wall then the draw function is different.
  //   // Create a status struct?
    
  //   if(wallCollision){
  //     snake.wallCollide(direction)
  //     coordinates.dispose()
  //     return deathCondition
  //   }else{
  //     if(snakeCollision){ 
  //       snake.collideSelf(direction)
  //       coordinates.dispose()
  //       return deathCondition;
  //     }
  //     snake.updateHead(coordinates)
  //   }
  
  //   snake.updateHead(coordinates)
  //   if(status.invalid) return deathCondition
  //   if(!status.ate){
  //     snake.chopTail()
  //   }
  // }

  method void move(int direction){
    var ListNode newCoordinates;
    var MoveStatus status;

    let newCoordinates = getNewCoordinates(direction);
    let status = moveStatusCheck(newCoordinates);
    // if(status.wallCrash()) { 
    //   // do snake.wallCrash(direction);
    //   do Sys.error(5);
    //   do newCoordinates.dispose();
    //   return 2;
    // }
    // if(status.snakeCrash()) { 
    //   // do snake.snakeCrash(direction);
    //   do Sys.error(5);
    //   do newCoordinates.dispose();
    //   return 2;
    // }
    if(~status.ate()){ 
      do snake.chopTail();
    }else{
      do makeFood();
    }
    do snake.updateHead(direction, newCoordinates);
    do status.dispose();
    return;
  }

  method void growSnake(){
    var ListNode newNode;
    let newNode = ListNode.new(2, 0);
    // Move right, don't delete tail
    do snake.updateHead(4, newNode);
    do Sys.wait(500);
    // Move right, don't delete tail
    let newNode = ListNode.new(3, 0);
    do snake.updateHead(4, newNode);
    do Sys.wait(500);
    // Move down, don't delete tail
    let newNode = ListNode.new(3, 1);
    do snake.updateHead(2, newNode);
    do Sys.wait(500);
    // Move left, don't delete tail
    let newNode = ListNode.new(2, 1);
    do snake.updateHead(3, newNode);
    do Sys.wait(500);
    // Move down, don't delete tail
    let newNode = ListNode.new(2, 2);
    do snake.updateHead(2, newNode);
    do Sys.wait(500);
    // Move right, don't delete tail
    let newNode = ListNode.new(3, 2);
    do snake.updateHead(4, newNode);
    do Sys.wait(500);
    // Move right, don't delete tail
    let newNode = ListNode.new(4, 2);
    do snake.updateHead(4, newNode);
    do Sys.wait(500);
    // Move up, don't delete tail
    let newNode = ListNode.new(4, 1);
    do snake.updateHead(1, newNode);
    do Sys.wait(500);
    // Move up, don't delete tail
    let newNode = ListNode.new(4, 0);
    do snake.updateHead(1, newNode);
    do Sys.wait(500);
    // Move right, delete tail
    let newNode = ListNode.new(5,0);
    do snake.updateHead(4, newNode);
    return;
  }

  method ListNode getNewCoordinates(int direction){
    var ListNode res;
    var ListNode head;

    let head = snake.getHead();
    // Init res as a new Node with the same x/y values as head
    let res = ListNode.new(head.getX(), head.getY());

    // Adjust x/y values according to direction
    // UP
    if(direction = 1){
      do res.setY(res.getY() - 1);
    }
    // DOWN
    if(direction = 2){
      do res.setY(res.getY() + 1);
    }
    // LEFT
    if(direction = 3){
      do res.setX(res.getX() - 1);
    }
    // RIGHT
    if(direction = 4){
      do res.setX(res.getX() + 1);
    }
    return res;
  }

  method MoveStatus moveStatusCheck(ListNode coordinates){
    var boolean snakeCrash;
    var boolean wallCrash;
    var boolean ate;

    let snakeCrash = snake.doesInhabit(coordinates);
    let wallCrash = coordsOutOfBounds(coordinates);
    // TODO: Implement food generation
    let ate = containsFood(coordinates);

    return MoveStatus.new(snakeCrash, wallCrash, ate);
  }

  method boolean containsFood(ListNode coordinates){
    if((coordinates.getX() = food.getX()) & (coordinates.getY() = food.getY())){ return true; }
    return false;
  }

  method void makeFood(){
    let food = makeFoodCoords();
    while(snake.doesInhabit(food)){
      let food = makeFoodCoords();
    }
    do drawFood();
    return;
  }

  method ListNode makeFoodCoords(){
    var int x;
    var int y;
    var ListNode head;
    var ListNode foodCoords;
    
    let head = snake.getHead();
    let x = Utils.mod((lsfr.nextRNG() + foodCount - head.getX()), (512/pixelSize) - 1);
    if(x < 0){ let x = x * -1; }
    let y = Utils.mod((lsfr.nextRNG() + head.getY() - snake.getLength()), (256/pixelSize - 1));
    if(y < 0){ let y = y * -1; }
    let foodCoords = ListNode.new(x, y);
    
    if(snake.doesInhabit(foodCoords)){
      let x = Utils.mod((lsfr.nextRNG() & counter), (512/pixelSize) - 1);
      if(x < 0){ let x = x * -1; }
      let y = Utils.mod((lsfr.nextRNG() | ((snake.getLength() * foodCount) + head.getX() - head.getY())), (256/pixelSize) - 1);
      if(y < 0){ let y = y * -1; }
      do foodCoords.setX(x);
      do foodCoords.setY(y);
    }
    return foodCoords;
  }

  method void drawFood(){
    var int x1, y1, x2, y2;
    
    let x1 = (food.getX() * pixelSize) + padding;
    let y1 = (food.getY() * pixelSize) + padding;
    let x2 = ((food.getX() + 1) * pixelSize) - padding;
    let y2 = ((food.getY() + 1) * pixelSize) - padding;
    do Screen.drawRectangle(x1, y1, x2, y2);
    return;
  }

  method boolean coordsOutOfBounds(ListNode coordinates){
    if(coordinates.getX() > ((512/pixelSize) - 1)){ return true; }
    if(coordinates.getY() > ((256/pixelSize) - 1)){ return true; }
    return false;
  }
}