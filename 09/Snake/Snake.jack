/** 

updateHead(coordinates){
  creates a new ListNode and enQ's that onto the snake Q
  draws new head
}

DONE
doesInhabit(x, y){
  returns boolean value of whether snake inhabits the given coordinates
}

drawInit(){
  draws snake for the first time
}

drawHead(direction){
  head = snakeQ.getHead
  draws new head and connects it to old head
  need direction to know how to draw
    should I organize by making discrete movement methods? moveUp moveDown etc? maybe?
  maybe this function exists as a switch statement because this language doesn't have switch statements
}

headLocation(){
  returns new ListNode with x/y coordinates of head
}

*/

class Snake {
  field SnakeQ snakeQ;
  field int size, padding;

  constructor Snake new (int argSize, int argPadding){
    let size = argSize;
    let padding = argPadding;
    let snakeQ = SnakeQ.new();
    return this;
  }

  method void drawInit(){
    // Snake is initially two nodes long
    var int x1, x2, y1, y2;

    let x1 = padding;
    let y1 = padding;
    let x2 = (size * 2) - padding;
    let y2 = size - padding;
    do Screen.setColor(true);
    do Screen.drawRectangle(x1, y1, x2, y2);
    return;
  }

  method void updateHead(int direction, ListNode newCoordinates){
    // Draw from top left corner to bottom right corner
    var int x1, x2, y1, y2, coordX, coordY;
    
    let coordX = newCoordinates.getX();
    let coordY = newCoordinates.getY();

    do snakeQ.enQ(newCoordinates);
    // UP
    if(direction = 1){
      let x1 = (coordX * size) + padding;
      let y1 = (coordY * size) + padding;
      let x2 = ((coordX + 1) * size) - padding;
      let y2 = ((coordY + 1) * size) + padding;
      // do Screen.setColor(true);
      // do Screen.drawRectangle(x1, y1, x2, y2);
      do drawInterpolation(x1, y1, x2, y2, direction, true);
      return;
    }

    // // DOWN
    if(direction = 2){
      let x1 = (coordX * size) + padding;
      let y1 = (coordY * size) - padding;
      let x2 = ((coordX + 1) * size) - padding;
      let y2 = ((coordY + 1) * size) - padding;
      // do Screen.setColor(true);
      // do Screen.drawRectangle(x1, y1, x2, y2);
      do drawInterpolation(x1, y1, x2, y2, direction, true);
    }

    // LEFT
    if(direction = 3){
      let x1 = (coordX * size) + padding;
      let y1 = (coordY * size) + padding;
      let x2 = ((coordX + 1) * size) + padding;
      let y2 = ((coordY + 1) * size) - padding;
      // do Screen.setColor(true);
      // do Screen.drawRectangle(x1, y1, x2, y2);
      do drawInterpolation(x1, y1, x2, y2, direction, true);
    }

    // RIGHT
    if(direction = 4){
      let x1 = (coordX * size) - padding;
      let y1 = (coordY * size) + padding;
      let x2 = ((coordX + 1) * size) - padding;
      let y2 = ((coordY + 1) * size) - padding;
      // do Screen.setColor(true);
      // do Screen.drawRectangle(x1, y1, x2, y2);
      do drawInterpolation(x1, y1, x2, y2, direction, true);
      return;
    }
    return;
  }

  // [1, 2, 3, 4] = [up, down, left, right]
  method void chopTail(){
    var ListNode toRemove, newTail;
    var int x1, x2, y1, y2;
    var int removeX, removeY;
    var int direction;


    let toRemove = snakeQ.getTail();
    let newTail = toRemove.getPrev();

    let removeX = toRemove.getX();
    let removeY = toRemove.getY();

    // direction = up
    if(toRemove.getY() > newTail.getY()){let direction = 1;}
    // direction = down
    if(toRemove.getY() < newTail.getY()){let direction = 2;}
    // direction = left
    if(toRemove.getX() > newTail.getX()){ let direction = 3;}
    // direction = right
    if(toRemove.getX() < newTail.getX()){ let direction = 4;}

    // deQ and dispose of tail node after extraxting x/y coords
    do snakeQ.deQ();
    // UP
    if(direction = 1){
      let x1 = (removeX * size) + padding;
      let y1 = (removeY * size) - padding + 1;
      let x2 = ((removeX + 1) * size) - padding;
      let y2 = ((removeY + 1) * size) - padding;
      // do Screen.setColor(false);
      // do Screen.drawRectangle(x1, y1, x2, y2);
      do drawInterpolation(x1, y1, x2, y2, direction, false);
      return;
    }

    // DOWN
    if(direction = 2){
      let x1 = (removeX * size) + padding;
      let y1 = (removeY * size) + padding;
      let x2 = ((removeX + 1) * size) - padding;
      let y2 = ((removeY + 1) * size)  + padding - 1;
      // do Screen.setColor(false);
      // do Screen.drawRectangle(x1, y1, x2, y2);
      do drawInterpolation(x1, y1, x2, y2, direction, false);
      return;
    }

    // LEFT
    if(direction = 3){
      let x1 = (removeX * size) - padding + 1;
      let y1 = (removeY * size) + padding;
      let x2 = ((removeX + 1) * size) - padding;
      let y2 = ((removeY + 1) * size) - padding;
      // do Screen.setColor(false);
      // do Screen.drawRectangle(x1, y1, x2, y2);
      do drawInterpolation(x1, y1, x2, y2, direction, false);
      return;
    }

    // RIGHT
    if(direction = 4){
      let x1 = (removeX * size) + padding;
      let y1 = (removeY * size) + padding;
      let x2 = ((removeX + 1) * size) + padding - 1;
      let y2 = ((removeY + 1) * size) - padding;
      // do Screen.setColor(false);
      // do Screen.drawRectangle(x1, y1, x2, y2);
      do drawInterpolation(x1, y1, x2, y2, direction, false);
      return;
    }
    return;
  }

  method void dispose() {
    do snakeQ.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void drawInterpolation(int x1, int y1, int x2, int y2, int direction, boolean color){
    // I made this hoping it would make the movement look smoother but tbh idk if it makes a difference.
    var int i, frameCount, xChunk, yChunk, last;

    let frameCount = 14;
    let i = 1;
    do Screen.setColor(color);

    // UP
    if(direction = 1){
      let yChunk = (y2-y1)/frameCount;
      let last = y2;
      while(i < frameCount){
        do Screen.drawRectangle(x1, last - yChunk, x2, last);
        let last = last - yChunk;
        let i = i + 1;
      }
      do Screen.drawRectangle(x1, y1, x2, last);
    }

    // DOWN
    if(direction = 2){
      let yChunk = (y2 - y1)/frameCount;
      let last = y1;
      while(i < frameCount){
        do Screen.drawRectangle(x1, last, x2, last + yChunk);
        let last = last + yChunk;
        let i = i + 1;
      }
      do Screen.drawRectangle(x1, last, x2, y2);
    }

    // LEFT
    if(direction = 3){
      let xChunk = (x2 - x1)/frameCount;
      let last = x2;
      while(i < frameCount){
        do Screen.drawRectangle(last - xChunk, y1, last, y2);
        let last = last - xChunk;
        let i = i + 1;
      }
      do Screen.drawRectangle(x1, y1, last, y2);
    }
    // RIGHT
    if(direction = 4){
      let xChunk = (x2 - x1)/frameCount;
      let last = x1;
      while(i < frameCount){
        do Screen.drawRectangle(last, y1, last + xChunk, y2);
        let last = last + xChunk;
        let i = i + 1;
      }
      do Screen.drawRectangle(last, y1, x2, y2);
    }
    return;
  }

  method boolean doesInhabit (ListNode coordinates) {
    return snakeQ.contains(coordinates);
  }

  method ListNode getHead(){
    return snakeQ.getHead();
  }

  method int getLength(){
    return snakeQ.getLength();
  }
}