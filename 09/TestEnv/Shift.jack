class Shift{

  constructor Shift new(){
    return this;
  }
  
  function int left(int shiftNum, int shiftCount){
    var int i, res;
    
    let i = 0;
    let res = shiftNum;
    while(i < shiftCount){
      let res = res + res;
      let i = i + 1;
    }
    return res;
  }

  function int logicalRight(int shiftNum, int shiftCount){
    var int i, mask, res;
    
    let i = 0;
    let mask = 32767;
    let res = shiftNum;
    while(i < shiftCount){
      let res = Shift.singleArithmeticRight(res);
      let res = res & 32767;
      let i = i + 1;
    }
    return res;
  }

  function int arithmeticRight(int shiftNum, int shiftCount){
    var int i, count, res;

    let i = 0;
    let res = shiftNum;
    let count = shiftCount;
    while(i < shiftCount){
      let res = Shift.singleArithmeticRight(res);
      let i = i + 1;
    }
    return res;
  }

  function int singleArithmeticRight(int num){
    var int accum, res;

    if(num > -1){ return num/2; }

    let num = -num;
    let res = 0;
    let accum = 0;
    while(accum < num){
      let accum = accum + 2;
      let res = res + 1;
    }
    return -res;
  }
}