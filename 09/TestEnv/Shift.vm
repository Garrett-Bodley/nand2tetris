function Shift.new 0
push constant 0
call Memory.alloc 1
pop pointer 0
push pointer 0
return
function Shift.left 2
push constant 0
pop local 0
push argument 0
pop local 1
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Shift.logicalRight 4
push constant 0
pop local 0
push constant 32767
pop local 2
push argument 0
pop local 1
push argument 1
pop local 3
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 1
push constant 2
call Shift.shiftDivision 2
pop local 1
push local 1
push constant 32767
and
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Shift.arithmeticRight 3
push constant 0
pop local 0
push argument 0
pop local 1
push argument 1
pop local 2
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 1
push constant 2
call Shift.shiftDivision 2
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Shift.shiftDivision 3
push constant 1
pop local 0
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 1
call Math.divide 2
return
label IF_FALSE0
push argument 0
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
not
push constant 1
add
pop local 0
push argument 0
not
push constant 1
add
pop argument 0
label IF_FALSE1
push argument 1
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
not
push constant 1
add
pop local 0
push argument 1
not
push constant 1
add
pop argument 1
label IF_FALSE2
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push argument 0
lt
not
if-goto WHILE_END0
push local 2
push argument 1
add
pop local 2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 1
push local 0
call Math.multiply 2
return
