(Sys.init)
// Push Constant
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// Pushing Return Address!
@RETURN_ADDRESS.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN_ADDRESS.0)
// Label
(Sys.init$WHILE)
// goto
@Sys.init$WHILE
0; JMP
(Main.fibonacci)
// Push from segment: argument
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push Constant
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
AM=M-1
D=M
A=A-1
D=M-D
@COMPARE.0
D;JLT
@0
D=A
@COMPARE.1
0;JMP
(COMPARE.0)
@0
A=A-1
D=A
(COMPARE.1)
@SP
A=M-1
M=D
// if-goto
@SP
AM=M-1
D=M
@Main.fibonacci$IF_TRUE
D;JNE
// goto
@Main.fibonacci$IF_FALSE
0; JMP
// Label
(Main.fibonacci$IF_TRUE)
// Push from segment: argument
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// Saving LCL to register 14!
@LCL
D=M
@14
M=D
// Saving the return address!
@LCL
D=M
@5
A=D-A
D=M
@15
M=D
@ARG
D=M
@13
M=D
@SP
AM=M-1
D=M
@13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@14
D=M
@1
A=D-A
D=M
@THAT
M=D
@14
D=M
@2
A=D-A
D=M
@THIS
M=D
@14
D=M
@3
A=D-A
D=M
@ARG
M=D
@14
D=M
@4
A=D-A
D=M
@LCL
M=D
// Going To the Return Address!
@15
A=M
0;JMP
// Label
(Main.fibonacci$IF_FALSE)
// Push from segment: argument
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push Constant
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
AM=M-1
D=M
A=A-1
M=M-D
// Pushing Return Address!
@RETURN_ADDRESS.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN_ADDRESS.1)
// Push from segment: argument
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// Push Constant
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
AM=M-1
D=M
A=A-1
M=M-D
// Pushing Return Address!
@RETURN_ADDRESS.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN_ADDRESS.2)
@SP
AM=M-1
D=M
A=A-1
M=M+D
// Saving LCL to register 14!
@LCL
D=M
@14
M=D
// Saving the return address!
@LCL
D=M
@5
A=D-A
D=M
@15
M=D
@ARG
D=M
@13
M=D
@SP
AM=M-1
D=M
@13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@14
D=M
@1
A=D-A
D=M
@THAT
M=D
@14
D=M
@2
A=D-A
D=M
@THIS
M=D
@14
D=M
@3
A=D-A
D=M
@ARG
M=D
@14
D=M
@4
A=D-A
D=M
@LCL
M=D
// Going To the Return Address!
@15
A=M
0;JMP
(INFINITE_LOOP)
@INFINITE_LOOP
0;JMP
