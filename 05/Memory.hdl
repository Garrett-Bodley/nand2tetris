// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */
 
 // function memory(in, load, addr){
 //   let res
 //   if(addr[14] == 0){
 //     res = ram(in, load, addr[0..14])
 //   }else{
 //     if(addr[13] == 0){
 //       res = screen(in, load, addr[0..11])
 //     }else{
 //       if(addr[13] == 1) res = keyIo()
 //     }
 //   }
 //   return res
 // }


CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    // if(address[14] == 0){
    //   memory address
    // }else{ 
    //   io device
    // } 
    DMux(in=load, sel=address[14], a=mem, b=io);


    // pass load signal and address to RAM
    RAM16K(in=in, load=mem, address=address[0..13], out=memOut);


    // notKbd = (address[13] == 0)
    Not(in=address[13], out=notKbd);

    // useScreen = (address[14] == 1 && address[13] == 0)
    And(a=address[14], b=notKbd, out=useScreen);
    // if(useScreen == 1) scrnLoad = io
    Mux(a=false, b=io, sel=useScreen, out=scrnLoad);
    
    Screen(in=in, load=scrnLoad, address=address[0..12], out=scrOut);
    Keyboard(out=kbdOut);

    // 00 = a
    // 01 = b
    // 10 = c
    // 11 = d

    Mux4Way16(a=memOut, b=memOut, c=scrOut, d=kbdOut, sel=address[13..14], out=out);

}

// Ram16K range:
// 0 -> 16383

// AKA

// 00000000_00000000 -> 00111111_11111111

// --------------

// Screen:

// Screen === RAM8K

// Screen range:

// 16384 -> 24575

// AKA

// 01000000_00000000 -> 01011111_11111111

// -----------------

// Keyboard:

// 24576

// AKA

// 01100000_00000000

// Invalid:

// >= 24577

// AKA

//  >= 0110000000000001