// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Example instruction code:
    // ixxaccccccdddjjj

    // The i-bit (also known as opcode) codes the instruction type
    //  - Either 0 for an A-instruction or 1 for a C-instruction. 

    // Break CPU down into smaller parts:

    // Parse instructions
    //   is A or C?
    //   if A
    //     load instruction into A register
    //   if C
    //     Are we using A or M value? 
    //       (read 'a' bit)
    //     Pass C instructions to ALU
    //   Where are we writing the output? (ddd bits)
    //     d determines where output is being saved
    //     We can save to ALL THREE locations at once
    //     d = load?
    //   Jump conditions?
    //     Evaluate D register value
    //     Jump to location in A
    //     Update PC location
    //     reset PC

    // Assume A instruction
    // Load A instruction into A register

    // Assume C instruction
    // single 'a' (instruction) bit determines if using A or M value (a = 1 == M instruction == We are manipulating the memory address stored in the A register)

    // d (destination) instruction parsing:
    // 000 = null
    // 001 = M
    // 010 = D
    // 100 = A
    

    Not(in=instruction[15], out=aInstruc);
    Not(in=aInstruc, out=cInstruc);

    //  A Register
    // load if A instruction OR if C instruction says load

    Mux16(a=aluOut, b=instruction, sel=aInstruc, out=aInput);
    Or(a=aInstruc, b=instruction[5], out=loadA);
    ARegister(in=aInput, load=loadA, out=aOut, out[0..14]=addressM);

    // In the case of a C-instruction, the single a-bit determines whether the ALU will operate on the A register input or on the M input, and the six c-bits determine which function the ALU will compute. 
    
    // a = instruction[12]
    // if(a == 1) M value
    // if(a == 0) A value
    Mux16(a=aOut, b=inM, sel=instruction[12], out=aOrM);

    // The cccccc bits of a C instruction map directly onto the ALU
    ALU(x=dOut, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=outIsZero, ng=outIsNegative, out=outM);


    //  D Register
    // ddd bits determine where ALU output is saved
    // if((instruction[4] == 1) && C instruction) load ALU output into D
    And(a=instruction[4], b=cInstruc, out=loadD);
    DRegister(in=aluOut, load=loadD, out=dOut);

    //  Jump Instruction Handling

    Not(in=outIsZero, out=outIsNotZero);
    Not(in=outIsNegative, out=outIsNotNegative);
    Or(a=outIsZero, b=outIsNegative, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);


    // Angel's Jump implementation:
     
    // 000 = no jump
    // No handling required
    
    // 001 = JGT
    // instruction[0] && !outIsZero & !outIsNegative
    
    And(a=instruction[0], b=positive, out=JGT);
    
    // 010 = JEQ
    // instruction [1] && outIsZero
    
    And(a=instruction[1], b=outIsZero, out=JEQ);

    // 100 = JLT
    // instruction[2] && outIsNegative
    And(a=instruction[2], b=outIsNegative, out=JLT);

    // 101 = JNE
    // instruction[2] && instruction[0] && !outIsZero
    
    And(a=instruction[0], b=instruction[2], out=preJNE);
    And(a=preJNE, b=outIsNotZero, out=JNE);

    // 011 = JGE
    // JGT || JEQ

    Or(a=JGT, b=JEQ, out=JGE);

    // 110 = JLE
    // JLT || JEQ

    Or(a=JLT, b=JEQ, out=JLE);

    // 111 = JMP
    // JLE || JGT

    Or(a=JLE, b=JGT, out=JMP);

    // We only jump if CPU has received a C instruction
    And(a=JMP, b=cInstruc, out=jump);

    // Only increment PC when we're not jumping
    Not(in=jump, out=notJump);
    PC(in=aOut, load=jump, inc=notJump, reset=reset, out[0..14]=pc);

    //  write to M?
    //  if C instruction && instruction[3]

     And(a=instruction[3], b=cInstruc, out=writeM);

     // Angel's Jump implementation:
     
     // And(a=instruction[1], b=zrout, out=jeq);
     // And(a=instruction[2], b=ngout, out=jlt);
     
     
     // Or(a=zrout, b=ngout, out=zeroOrNeg);
     // Not(in=zeroOrNeg, out=positive);
     // And(a=positive, b=instruction[0], out=jgt);
     
     // Or(a=jeq, b=jlt, out=jle);
     // Or(a=jle, b=jgt, out=jumpToA);
     
     // // Only jump if C instruction
     // And(a=Cinst, b=jumpToA, out=PCload);
     // Not(in=PCload, out=PCinc);
     
     // PC(in=Aregout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}