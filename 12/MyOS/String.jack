// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int length, maxLength;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int argMaxLength) {
      // Error 14: Maximum length must be non-negative
      if(maxLength < 0){ do Sys.error(14); }

      let chars = Array.new(argMaxLength + 1);
      let maxLength = argMaxLength;
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do Memory.deAlloc(chars);
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      // Error 15: String index out of bounds
      if(~(j < length)){ do Sys.error(15); }
      if(j < 0){ let j = length + j; }
      return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      // Error 16: String index out of bounds
      if(~(j < length)){ do Sys.error(16); }
      if(j < 0){ let j = length + j; }
      let chars[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      // Error 17: String is full
      if(length = maxLength){ do Sys.error(17); }

      let chars[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      // Error 18: String is empty
      if(length = 0){ do Sys.error(18); }

      let chars[length - 1] = 0;
      let length = length - 1;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var bool neg;
      var int i, d, v;

      let v = 0;
      let i = 0;

      if(chars[0] = 45){
        let neg = true;
        let i = 1;
      }

      while( (i < length) & (chars[i] > 47) & (chars[i] < 58) ){
        let d = chars[i] - 48;
        let v = (v * 10) + d;
        let i = i + 1;
      }

      if(neg){ return -v; }
      return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var bool neg;
      var char last;
      var int i, j;
      
      // make int positive if it is negative and set a flag
      if(val < 0){
        let val = -val;
        let neg = true;
      }

      // string length algorithm doesn't work for values > 9999 because of integer overflow
      // so we must hardcode that condition
      if(val > 9999){
        let j = 5;
      }else{
        // Calculate string length of int
        let i = 10;
        let j = 1;
        while(~(i > val)){
          let i = i * 10;
          let j = j + 1;
        }
      }

      if(neg){ let j = j + 1; }
      // Error 19: Insufficient string capacity
      if(j > maxLength){ do Sys.error(19); }


      // Erase string contents if present
      if(length > 0){
        let i = 0;
        while(i < length){
          let chars[i] = 0;
          let i = i + 1;
        }
        let length = 0;
      }

      // last = 48 + val % 10
      let last = 48 + (val - (10 * (val / 10)));

      if(val < 10){
        let chars[length] = last;
        let length = length + 1;
      }else{
        do setInt(val/10);
        let chars[length] = last;
        let length = length + 1;
      }

      // Shift all chars over by one and prepend '-'
      if(neg){
        let i = length;
        while(i > 0){
          let chars[i] = chars[i - 1];
          let i = i - 1;
        }
        let chars[0] = 45;
        let length = length + 1;
      }

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
