// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
  static boolean color;
  static Array twoToThe;
    /** Initializes the Screen. */
    function void init() {
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 32767 + 1;
      do Screen.clearScreen();
      do Screen.setColor(true);
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;
      let i = 16384;
      while(i < 24576){
        do Memory.poke(i, 0);
        let i = i + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int word, offset, mask;
      let word = 16384 + (y * 32) + (x / 16);
      let offset = x - (16 * (x / 16));
      if(color){
        let mask = twoToThe[offset];
        do Memory.poke(word, Memory.peek(word) | mask);
      }else{
        let mask = ~twoToThe[offset];
        do Memory.poke(word, Memory.peek(word) & mask);
      }
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int a, b, dx, dy, adyMinusbdx;
      
      // Ensure we draw from left to right
      // Using a as a temp var since it gets reinitialized later
      if(x1 > x2){
        let a = x1;
        let x1 = x2;
        let x2 = a;
        let a = y1;
        let y1 = y2;
        let y2 = a;
      }
      
      let dx = x2 - x1;
      let dy = y2 - y1;
      let a = 0;
      let b = 0;

      if(~(dx = 0) & ~(dy = 0)){
        if(dy < 0){
          // Line slopes up
          let adyMinusbdx = 0;
          while(~(a > dx) & ~(b < dy)){
            do Screen.drawPixel(x1 + a, y1 + b);
            if(adyMinusbdx < 0){
              let a = a + 1;
              let adyMinusbdx = adyMinusbdx - dy;
            }else{
              let b = b - 1;
              let adyMinusbdx = adyMinusbdx - dx;
            }
          }
        }else{
          // Line slopes down
          let adyMinusbdx = 0;
          while(~(a > dx) & ~(b > dy)){
            do Screen.drawPixel(x1 + a, y1 + b);
            if(adyMinusbdx < 0){
              let a = a + 1;
              let adyMinusbdx = adyMinusbdx + dy;
            }else{
              let b = b + 1;
              let adyMinusbdx = adyMinusbdx - dx;
            }
          }
        }
      }else{
        if(dx = 0){
          while(~(b > dy)){
            do Screen.drawPixel(x2, y1 + b);
            let b = b + 1;
          }
        }else{
          do Screen.drawHorizontalLine(x1, x2, y1);
        }
      }
      return;
    }

    /** Draws a line from pixel (x1, y) to pixel (x2, y) using the current color. */
    function void drawHorizontalLine(int x1, int x2, int y) {
      var int startWord, endWord, offsetStart, offsetEnd, mask;

      // Draw a pixel if x1 == x2
      if(x1 = x2){ 
        do Screen.drawPixel(x1, y); 
        return;
      }

      // Ensures x2 > x1
      // Using mask as a temp variable as it gets initialized to 0 later on.
      if(x2 < x1){
        let mask = x1;
        let x1 = x2;
        let x2 = mask;
      }

      let startWord = 16384 + (y * 32) + (x1 / 16);
      let endWord = 16384 + (y * 32) + (x2 / 16);
      let offsetStart = x1 - (16 * (x1 / 16));
      let offsetEnd = x2 - (16 * (x2 / 16));

      if(startWord = endWord){
        let mask = 0;
        while(~(offsetStart > offsetEnd)){
          let mask = mask | twoToThe[offsetStart];
          let offsetStart = offsetStart + 1;
        }
        if(color){
          do Memory.poke(startWord, Memory.peek(startWord) | mask);
        }else{
          let mask = ~mask;
          do Memory.poke(startWord, Memory.peek(startWord) & mask);
        }
        return;
      }

      if(offsetStart > 0){
        let mask = 0;
        while(offsetStart < 16){
          let mask = mask | twoToThe[offsetStart];
          let offsetStart = offsetStart + 1;
        }
        if(color){
          do Memory.poke(startWord, Memory.peek(startWord) | mask);
        }else{
          let mask = ~mask;
          do Memory.poke(startWord, Memory.peek(startWord) & mask);
        }
      }else{
        if(color){
          do Memory.poke(startWord, -1);
        }else{
          do Memory.poke(startWord, 0);
        }
      }
      let startWord = startWord + 1;

      while(startWord < endWord){
        if(color){
          do Memory.poke(startWord, -1);
        }else{
          do Memory.poke(startWord, 0);
        }
        let startWord = startWord + 1;
      }

      if(offsetEnd = 15){
        if(color){
          do Memory.poke(startWord, -1);
        }else{
          do Memory.poke(startWord, 0);
        }
      }else{
        let offsetStart = 0;
        let mask = 0;
        while(~(offsetStart > offsetEnd)){
          let mask = mask | twoToThe[offsetStart];
          let offsetStart = offsetStart + 1;
        }
        if(color){
          do Memory.poke(startWord, Memory.peek(startWord) | mask);
        }else{
          let mask = ~mask;
          do Memory.poke(startWord, Memory.peek(startWord) & mask);
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int dx, dy;
      let dx = x2 - x1;
      let dy = y2 - y1;
      if((dx > 0) & (dy > 0)){
        while(~(y1 > y2)){
          do Screen.drawHorizontalLine(x1, x2, y1);
          let y1 = y1 + 1;
        }
      }else{
        if(dx = 0){
          do Screen.drawLine(x1, y1, x2, y2);
        }else{
          do Screen.drawHorizontalLine(x1, x2, y1);
        }
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      return;
    }
}
